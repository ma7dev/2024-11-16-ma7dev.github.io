<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://ma7.dev/feed.xml" rel="self" type="application/atom+xml"/><link href="https://ma7.dev/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-07-15T05:04:05+00:00</updated><id>https://ma7.dev/feed.xml</id><title type="html">blank</title><subtitle>Thinking out loud. </subtitle><entry><title type="html">Join These 6 Must-Join Discord Servers for ML Enthusiasts! 🚀</title><link href="https://ma7.dev/blog/2024/join-these-6-must-join-discord-servers-for-ml-enthusiasts/" rel="alternate" type="text/html" title="Join These 6 Must-Join Discord Servers for ML Enthusiasts! 🚀"/><published>2024-07-14T17:50:04+00:00</published><updated>2024-07-14T17:50:04+00:00</updated><id>https://ma7.dev/blog/2024/join-these-6-must-join-discord-servers-for-ml-enthusiasts-</id><content type="html" xml:base="https://ma7.dev/blog/2024/join-these-6-must-join-discord-servers-for-ml-enthusiasts/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[If you're diving into the world of machine learning or looking to deepen your knowledge, joining a Discord server can be a fantastic way to connect with like-minded individuals, learn from experts, and participate in community projects. Here are some top Discord communities that every ML enthusiast should consider joining! 🏗️ Full Stack Deep Learning 🤖 What's Inside: Based on the Full Stack Deep Learning course covering deep learning architectures, development infrastructure, data management, model deployment, and ethical considerations. 🧑‍🏫 Created by: The Full Stack Team: Charles Frye, Sergey Karayev, and Josh Tobin 🔗 Join here! 📖 Yannic Kilcher's Discord Server 📅 What's Inside: Weekly Paper Reading Meetings discussing the latest research papers every Saturday. Community-maintained open-source projects like HomebrewNLP. 🎉 Extras: Enjoy a lighter side with community memes. 🧑‍🏫 Created by: Yannic Kilcher, who makes videos about machine learning papers and other ML-related content. 🔗 Join here! 👾 CUDA MODE 🏎️ What's Inside: For those who want to push GPUs to their limits using CUDA. Includes rich lectures and guest speaker sessions. 🎥 Media: Check out their YouTube channel for more in-depth sessions. 🧑‍🏫 Created by: Mark Saroufim And Andreas Köpf. Mark is part of the PyTorch team at Meta and wrote a lot of amazing articles, such as Machine Learning: The Great Stagnation and Working Class Deep Learner! 🔗 Join here! 🛠️ MLOps (@chipro) 🤖 What's Inside: Focus on MLOps, Machine Learning Engineering, and ML deployment. Features weekly reading groups and project-based presentations. 🎥 Media: Dive deeper by following their YouTube channel. 🧑‍🏫 Created by: Chip Huyen, who is the author of Designing Machine Learning Systems (O’Reilly 2022) and published other amazing content! 🔗 Join here! 🔢 Mathematics 📚 What's Inside: Assistance with every math topic from beginner to advanced levels and a dedicated channel for LaTeX help. 👥 Community Vibe: Great for tackling math problems together! 🔗 Join here! 🔥 PyTorch Community (unofficial) 📚 What's Inside: Perfect for PyTorch users seeking help, contributing to projects, and learning from each other. 📝 Highlight: Help-forum channel where users can ask questions and get help from the community. 🌐 Extras: PyTorch-focused contribution channels for feedback on contributing to PyTorch repos on GitHub, and study-group channels to form study groups. 🧑‍🏫 Managed by: Mazen Alotaibi (Me!) 🔗 Join here! Connecting with others can accelerate your learning and expose you to new perspectives in the ever-evolving field of machine learning. Join these communities and start engaging today! 🌟 If you enjoyed reading this article, check my other articles on ma7.dev/blog.]]></summary></entry><entry><title type="html">Resolving Module Version Chaos: Locking Down Dependencies in Python Projects with Poetry</title><link href="https://ma7.dev/blog/2024/resolving-module-version-chaos-locking-down-dependencies-in-python-projects-with-poetry/" rel="alternate" type="text/html" title="Resolving Module Version Chaos: Locking Down Dependencies in Python Projects with Poetry"/><published>2024-07-13T14:35:49+00:00</published><updated>2024-07-13T14:35:49+00:00</updated><id>https://ma7.dev/blog/2024/resolving-module-version-chaos-locking-down-dependencies-in-python-projects-with-poetry</id><content type="html" xml:base="https://ma7.dev/blog/2024/resolving-module-version-chaos-locking-down-dependencies-in-python-projects-with-poetry/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[Hey there! 👋 I've got a nifty trick to share about managing Python dependencies, especially when they're not version-locked. Let me walk you through how I tackled it using Poetry. Problem 🤔 Ever faced a requirements.txt that looks like this? tqdm matplotlib No version numbers can be a recipe for chaos during builds or at runtime due to inconsistencies. I needed to lock these dependencies to specific versions to keep things smooth and reliable, like this: tqdm==4.64.0 matplotlib==3.5.3 Solution ✨ Why Poetry? I chose Poetry because it's like the npm of the Python world—it respects semantic versioning and creates a lock file so every install is consistent. No more "works on my machine" issues! Step-by-Step Guide 1) Install Poetry: curl -sSL https://install.python-poetry.org | python3 - 2) Grab a simple pyproject.toml template: wget https://gist.githubusercontent.com/ma7dev/7298ffc4409032edd4d18a57b4c38f3a/raw/1c32efcbde31aaf896c6d47b32dac19ed44d14a4/pyproject.toml 3) Install those unversioned dependencies: cat requirements.txt | xargs poetry add 4) Export the installed dependencies in a more structured format: poetry export -f requirements.txt --output long_requirements.txt --without-hashes 5) Clean up the exported file: # Strip unwanted python version constraints cat long_requirements.txt | cut -d ";" -f 1 &gt; with_dep_requirements.txt # Filter out extraneous dependencies cat requirements.txt | while read line do echo $(grep -n $line'==' with_dep_requirements.txt | cut -d ":" -f 2) &gt;&gt; final_requirements.txt done Result 🚀 Here’s what you end up with, all dependencies neatly versioned (final_requirements.txt): tqdm==4.64.0 matplotlib==3.5.3 ... (rest of your dependencies) This setup ensures that all packages are locked to specific versions, making your project stable and reproducible wherever it goes. 🌐 If you enjoyed reading this article, check my other articles on ma7.dev/blog.]]></summary></entry></feed>